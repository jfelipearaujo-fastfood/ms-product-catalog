// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/jfelipearaujo-org/ms-product-catalog/internal/common"

	entity "github.com/jfelipearaujo-org/ms-product-catalog/internal/entity"

	get_category "github.com/jfelipearaujo-org/ms-product-catalog/internal/service/category/get_category"

	mock "github.com/stretchr/testify/mock"
)

// MockGetCategoryService is an autogenerated mock type for the GetCategoryService type
type MockGetCategoryService struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, pagination, request
func (_m *MockGetCategoryService) Handle(ctx context.Context, pagination common.Pagination, request get_category.GetCategoryDto) (entity.Category, error) {
	ret := _m.Called(ctx, pagination, request)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Pagination, get_category.GetCategoryDto) (entity.Category, error)); ok {
		return rf(ctx, pagination, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Pagination, get_category.GetCategoryDto) entity.Category); ok {
		r0 = rf(ctx, pagination, request)
	} else {
		r0 = ret.Get(0).(entity.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Pagination, get_category.GetCategoryDto) error); ok {
		r1 = rf(ctx, pagination, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGetCategoryService creates a new instance of MockGetCategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetCategoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetCategoryService {
	mock := &MockGetCategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
