// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/jfelipearaujo-org/ms-product-catalog/internal/common"

	entity "github.com/jfelipearaujo-org/ms-product-catalog/internal/entity"

	get_products "github.com/jfelipearaujo-org/ms-product-catalog/internal/service/product/get_products"

	mock "github.com/stretchr/testify/mock"
)

// MockGetProductsService is an autogenerated mock type for the GetProductsService type
type MockGetProductsService struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, pagination, request
func (_m *MockGetProductsService) Handle(ctx context.Context, pagination common.Pagination, request get_products.GetProductsDto) (int64, []entity.Product, error) {
	ret := _m.Called(ctx, pagination, request)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 int64
	var r1 []entity.Product
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Pagination, get_products.GetProductsDto) (int64, []entity.Product, error)); ok {
		return rf(ctx, pagination, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Pagination, get_products.GetProductsDto) int64); ok {
		r0 = rf(ctx, pagination, request)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Pagination, get_products.GetProductsDto) []entity.Product); ok {
		r1 = rf(ctx, pagination, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, common.Pagination, get_products.GetProductsDto) error); ok {
		r2 = rf(ctx, pagination, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockGetProductsService creates a new instance of MockGetProductsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetProductsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetProductsService {
	mock := &MockGetProductsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
