// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	health "github.com/jfelipearaujo-org/ms-product-catalog/internal/shared/health"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDatabaseService is an autogenerated mock type for the DatabaseService type
type MockDatabaseService struct {
	mock.Mock
}

// GetInstance provides a mock function with given fields:
func (_m *MockDatabaseService) GetInstance() *mongo.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func() *mongo.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// Health provides a mock function with given fields:
func (_m *MockDatabaseService) Health() *health.HealthStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 *health.HealthStatus
	if rf, ok := ret.Get(0).(func() *health.HealthStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.HealthStatus)
		}
	}

	return r0
}

// NewMockDatabaseService creates a new instance of MockDatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseService {
	mock := &MockDatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
